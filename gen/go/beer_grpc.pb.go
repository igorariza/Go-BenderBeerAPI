// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: beer.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BeerAPIServiceClient is the client API for BeerAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeerAPIServiceClient interface {
	///CRUD
	CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error)
	ListBeers(ctx context.Context, in *ListBeersRequest, opts ...grpc.CallOption) (*ListBeersResponse, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error)
	UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error)
	GetOneBeer(ctx context.Context, in *GetOneBeerRequest, opts ...grpc.CallOption) (*GetOneBeerResponse, error)
}

type beerAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerAPIServiceClient(cc grpc.ClientConnInterface) BeerAPIServiceClient {
	return &beerAPIServiceClient{cc}
}

func (c *beerAPIServiceClient) CreateBeer(ctx context.Context, in *CreateBeerRequest, opts ...grpc.CallOption) (*CreateBeerResponse, error) {
	out := new(CreateBeerResponse)
	err := c.cc.Invoke(ctx, "/beer.v1alpha1.BeerAPIService/CreateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerAPIServiceClient) ListBeers(ctx context.Context, in *ListBeersRequest, opts ...grpc.CallOption) (*ListBeersResponse, error) {
	out := new(ListBeersResponse)
	err := c.cc.Invoke(ctx, "/beer.v1alpha1.BeerAPIService/ListBeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerAPIServiceClient) DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error) {
	out := new(DeleteBeerResponse)
	err := c.cc.Invoke(ctx, "/beer.v1alpha1.BeerAPIService/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerAPIServiceClient) UpdateBeer(ctx context.Context, in *UpdateBeerRequest, opts ...grpc.CallOption) (*UpdateBeerResponse, error) {
	out := new(UpdateBeerResponse)
	err := c.cc.Invoke(ctx, "/beer.v1alpha1.BeerAPIService/UpdateBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerAPIServiceClient) GetOneBeer(ctx context.Context, in *GetOneBeerRequest, opts ...grpc.CallOption) (*GetOneBeerResponse, error) {
	out := new(GetOneBeerResponse)
	err := c.cc.Invoke(ctx, "/beer.v1alpha1.BeerAPIService/GetOneBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerAPIServiceServer is the server API for BeerAPIService service.
// All implementations should embed UnimplementedBeerAPIServiceServer
// for forward compatibility
type BeerAPIServiceServer interface {
	///CRUD
	CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error)
	ListBeers(context.Context, *ListBeersRequest) (*ListBeersResponse, error)
	DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error)
	UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error)
	GetOneBeer(context.Context, *GetOneBeerRequest) (*GetOneBeerResponse, error)
}

// UnimplementedBeerAPIServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBeerAPIServiceServer struct {
}

func (UnimplementedBeerAPIServiceServer) CreateBeer(context.Context, *CreateBeerRequest) (*CreateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBeer not implemented")
}
func (UnimplementedBeerAPIServiceServer) ListBeers(context.Context, *ListBeersRequest) (*ListBeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeers not implemented")
}
func (UnimplementedBeerAPIServiceServer) DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedBeerAPIServiceServer) UpdateBeer(context.Context, *UpdateBeerRequest) (*UpdateBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBeer not implemented")
}
func (UnimplementedBeerAPIServiceServer) GetOneBeer(context.Context, *GetOneBeerRequest) (*GetOneBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBeer not implemented")
}

// UnsafeBeerAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeerAPIServiceServer will
// result in compilation errors.
type UnsafeBeerAPIServiceServer interface {
	mustEmbedUnimplementedBeerAPIServiceServer()
}

func RegisterBeerAPIServiceServer(s grpc.ServiceRegistrar, srv BeerAPIServiceServer) {
	s.RegisterService(&BeerAPIService_ServiceDesc, srv)
}

func _BeerAPIService_CreateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerAPIServiceServer).CreateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.v1alpha1.BeerAPIService/CreateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerAPIServiceServer).CreateBeer(ctx, req.(*CreateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerAPIService_ListBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerAPIServiceServer).ListBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.v1alpha1.BeerAPIService/ListBeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerAPIServiceServer).ListBeers(ctx, req.(*ListBeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerAPIService_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerAPIServiceServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.v1alpha1.BeerAPIService/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerAPIServiceServer).DeleteBeer(ctx, req.(*DeleteBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerAPIService_UpdateBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerAPIServiceServer).UpdateBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.v1alpha1.BeerAPIService/UpdateBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerAPIServiceServer).UpdateBeer(ctx, req.(*UpdateBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerAPIService_GetOneBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOneBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerAPIServiceServer).GetOneBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.v1alpha1.BeerAPIService/GetOneBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerAPIServiceServer).GetOneBeer(ctx, req.(*GetOneBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeerAPIService_ServiceDesc is the grpc.ServiceDesc for BeerAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeerAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beer.v1alpha1.BeerAPIService",
	HandlerType: (*BeerAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBeer",
			Handler:    _BeerAPIService_CreateBeer_Handler,
		},
		{
			MethodName: "ListBeers",
			Handler:    _BeerAPIService_ListBeers_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _BeerAPIService_DeleteBeer_Handler,
		},
		{
			MethodName: "UpdateBeer",
			Handler:    _BeerAPIService_UpdateBeer_Handler,
		},
		{
			MethodName: "GetOneBeer",
			Handler:    _BeerAPIService_GetOneBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beer.proto",
}
